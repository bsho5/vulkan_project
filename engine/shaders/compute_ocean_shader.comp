#version 450


const uint vertciesNumber = 1572864;
// Output buffer for vertex positions and normals
layout(std140, binding = 2) buffer OutputBuffer {
    vec4 positionWorld[vertciesNumber];
    vec3 normalWorld[vertciesNumber];
}outputData;

// Uniform buffer for global data
layout(set = 0, binding = 0) uniform GlobalUbo {
  mat4 projection;
  mat4 view;
  vec4 ambientLightColor; // w is intensity
  vec3 lightPosition;
  mat4 invViewMatrix;
  vec3 cameraPosition;
  vec4 lightColor;
  float t;
} ubo;

layout (local_size_x = 64, local_size_y =1, local_size_z = 1) in;
// layout(push_constant) uniform Push {
 
//   mat4 modelMatrix;
//   mat4 normalMatrix;
// } push;
 

              
struct Wave {
    float amplitude;    // Amplitude (A)
    float wavelength;   // Wavelength (L)
    float speed;        // Speed (S)
    vec3 direction;     // Direction (D)
};

shared vec4 sharedData[256];
shared vec3 sharedNormals[256];

 const int NUM_WAVES = 16;

// Function to compute the sum of sine waves and their partial derivatives

void computeWaterHeightAndDerivatives(out vec3 position1,vec3 position, float time, Wave waves[NUM_WAVES], int numWaves, out float height, out vec3 dHeight) {
    height = 0.0;            
    dHeight = vec3(0.0);    

    vec3 totalDisplacement = vec3(0.0);  

    float a = 1.0 * 0.4;  // Base amplitude
    float w = 1.0 * 0.25;  // Base frequency

    for (int i = 0; i < numWaves; i++) {
         // In your case, w is directly used as frequency
        float omega = waves[i].speed * w;  

        vec2 Di = (waves[i].direction.xz);  
        float Qi =  1.5;
        //1.0 / (w * a * float(numWaves));  // Auto-compute steepness

        float phase =( w * dot(Di, position.xz)) + omega * time; 
        float S0 = sin(phase);
        float C0 = cos(phase);
        
        // Gerstner displacement (sharp crests)
        vec2 displacementXZ = Qi * a * Di * C0;  
        totalDisplacement.xz += displacementXZ;
        
        // Compute height displacement
        float waveHeight = a * S0;
        height += waveHeight;
        
        // Compute normal derivatives
        vec2 dXZ = - Qi *Di * w * a * S0;
        dHeight += vec3(dXZ.x, -1 + (Qi * w * a * C0), dXZ.y);
        
        // Decay amplitude & increase frequency for realism
        a *= 0.82;  // Reduce amplitude
        w *= 1.18;  // Increase frequency
    }
    
    // Apply Gerstner displacement
    position1 = totalDisplacement;
}

// Function to compute the direction of a vertex
vec4 computeHeightAndNormal(out vec3 position1,vec3 position, float time, Wave waves[NUM_WAVES], int numWaves) {
    float height = 0.0;
    vec3 dHeight = vec3(0.0);
    computeWaterHeightAndDerivatives(position1,position, time, waves, numWaves, height, dHeight);
    return (vec4(dHeight,height));
}

   
    Wave waves[NUM_WAVES];

    void addWaves(){
    waves[0] = Wave(1.5, 6.0, 0.5, vec3(1.0,0.2,1.0));
    waves[1] = Wave(2.0, 4.0, 0.5, vec3(0.5,1.0,1.0));
    waves[2] = Wave(2.5, 7.0, 0.5, vec3(0.6,0.3,0.5));
    waves[3] = Wave(1.0, 6.0, 1.0, vec3(0.7,0.5,0.7));
    waves[4] = Wave(1.6, 4.0, 0.5, vec3(0.4,0.9,0.2));
    waves[5] = Wave(2.3, 5.0, 0.25, vec3(1.0,1.0,0.4));
    waves[6] = Wave(0.7, 4.0, 0.1, vec3(0.3,0.6,0.6));
    waves[7] = Wave(1.8, 7.0, 1.0, vec3(0.5,0.5,0.3));
    waves[8] = Wave(1.5, 6.0, 0.5, vec3(0.6,0.2,0.35));
    waves[9] = Wave(2.0, 4.0, 0.5, vec3(0.55,1.0,1.0));
    waves[10] = Wave(2.5, 7.0, 0.5, vec3(0.3,0.3,0.5));
    waves[11] = Wave(1.0, 6.0, 1.0, vec3(0.4,0.5,0.6));
    waves[12] = Wave(1.6, 4.0, 0.5, vec3(0.6,0.9,0.25));
    waves[13] = Wave(2.3, 5.0, 0.25, vec3(1.0,1.0,0.45));
    waves[14] = Wave(0.7, 4.0, 0.1, vec3(0.2,0.6,0.3));
    waves[15] = Wave(1.8, 7.0, 1.0, vec3(0.4,0.5,0.5));
   
    }

void main() {
    
    addWaves();

    uint localID = gl_LocalInvocationIndex;
   
    uint gID =  gl_GlobalInvocationID.x;
    uint vertexNumber = vertciesNumber;

    if(gID < vertexNumber)
    {
     // calculating the new x and z positions of the vertices  
    vec3 base_position = vec3(0.0,0.0,0.0);
   
    uint vi = gID;
    // uint vertexNumber = vertciesNumber;
    uint quadWidth = uint(sqrt(vertexNumber/6));
    uint quadVertices = 6;
    uint axisVertices = vertexNumber/quadWidth;
    uint x = vi % (axisVertices); 
    vec3 increament = vec3(floor(float(x)/(quadVertices*1.0)),0.0,floor(float(vi)/(axisVertices)));
    vi = vi % quadVertices ;
    if(vi>2) vi = vi-2; 
    vec3 p = base_position + increament + (vec3(floor(float(vi)/2.0),0.0, vi % 2 ) );
    vec4 position = vec4(p,1.f);

      // calculating the new y position of the vertices  
    vec4 wave = vec4(0.0);
    vec3 dPosition = vec3(0.0);
    wave = computeHeightAndNormal(dPosition,position.xyz,  ubo.t,  waves,  NUM_WAVES) ;
    float height = wave.w;
    vec3 height_normal = (wave.xyz);  
    position.x += dPosition.x;
    position.z += dPosition.z;
    position.y = -(height) ; 

      sharedData[localID] = position;
      sharedNormals[localID] = (normalize (vec3(height_normal.x,-1.0,height_normal.z)));
       barrier();
       
    // if(localID == 0 ){
    
    //   for (int i = 0; i < 64; i++) {
    //     outputData.positionWorld[gl_GlobalInvocationID.x + i] = sharedData[i];
    //      outputData.normalWorld[gl_GlobalInvocationID.x + i] = sharedNormals[i];
    //   }
     
    //     } 
        //  uint outputIndex = gl_WorkGroupID.x * 256 + localID; 

        //  outputData.positionWorld[outputIndex] = sharedData[localID];
        //   outputData.normalWorld[outputIndex] = sharedNormals[localID];
     outputData.positionWorld[gl_GlobalInvocationID.x] = position;
    outputData.normalWorld[gl_GlobalInvocationID.x] = (normalize (vec3(height_normal.x,-1.0,height_normal.z)));
    }
    
}


// void computeWaterHeightAndDerivatives(vec3 position1, float time, Wave waves[NUM_WAVES], int numWaves, out float height, out vec3 dHeight) {
//     height = 0.0;                                               // vertex movment on the y axis
//     float a = 1.0 * 0.75  ;                                     // amplitude
//     float w = 1.0 * 0.25 ;                                      // frequency
//     dHeight = vec3(0.0);                                        // vertex normal based on using partial derivatives
//     vec3 dWaveHeight = vec3(1.0);                               // a vector to compute every wave's partial derivative
//     float waveHeight = 0.0;                                     // a vector to compute every wave's movment on the y axis
//     vec2 dxz = vec2(0.0);


//     for (int i = 0; i < numWaves; i++) {
          
//         float phaseConstant =  waves[i].speed * w ;              // Phase constant = S * Ï‰
                    
//         // Compute the wave phase
//         vec3 d = waves[i].direction;                            // wave direction 
//         vec2 xzDirection = d.xz;                                // wave direction in x and z planes    
//         float xz = (d.x * position1.x) + (d.z * position1.z);
//         float phase =  ((xz * w) + (time + phaseConstant)) ;
     
//         // Compute the wave contribution to the height
//         waveHeight = a * exp(sin(phase)-1);
//         height += waveHeight ;

//         // Compute the partial derivatives
//         dxz =  xzDirection * w * a * exp(sin(phase)-1) * cos(phase);
//         dWaveHeight = vec3 (-1.0 * dxz.x ,-1.0 , -1.0 * dxz.y);
//         dHeight += dWaveHeight;

//         a = a * 0.82;                                          // Brownian Motion amplitude
//         w = w * 1.18;                                          // Brownian Motion frequency
//     }
// }